import pandas as pd

URLS = pd.read_csv('resources/SDK_Data.csv', index_col='Country_Scenario')
SCENARIOS = URLS.index.to_list() # list of scenario names from csv - extract using pandas 
OUTPUT_FILES = ['CapitalInvestment.csv', 'AnnualVariableOperatingCost.csv', 'AnnualFixedOperatingCost.csv'] # final files to be inputted into minfin (ie. CapaitalInvestment, AnnualFixedOperaingCost)

def get_url(wildcards):
    return URLS.at[wildcards.scenario, 'URL']

rule all:
    input:
        expand("results/{scenario}/MinFin/{f}", scenario=SCENARIOS, f=OUTPUT_FILES)

rule download_xlsx:
    message:"Downloading xlsm [replace with wildcard] from Zenodo"
    params:
        get_url
    output:
        'results/{scenario}/{scenario}.xlsm'
    script: 
        "scripts/download_xlsx.py"

rule extract_data:
    message:"Extracted txt data for [replace with wildcard]"
    input:
        'results/{scenario}/{scenario}.xlsm'
    output:
        'results/{scenario}/{scenario}.txt'
    script: 
        "scripts/extract_data.py"

rule preprocess_data:
    message:"Pre-processing data for [replace with wildcard]"
    input:
        'results/{scenario}/{scenario}.txt'
    output:
        'results/{scenario}/{scenario}_preprocessed.txt'
    script: 
        "scripts/preprocess.py"

rule build_model:
    message:"Building LP file for [replace with wildcard]"
    params:
        'resources/osemosys.txt'
    input:
        'results/{scenario}/{scenario}_preprocessed.txt'
    output:
        # LP file in results/
        # will turn this to a temp file since these files can be large
        # https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#protected-and-temporary-files
        'results/{scenario}/{scenario}.lp'
    shell: 
        # glpk command to build an LP file 
        ''

rule solve_model:
    message:"Solving model for [replace with wildcard]"
    params:
        # solver selection (cbc|gurobi|cplex)
        ''
    input:
        'results/{scenario}/{scenario}.lp'
    output:
        # solution file in results/
        # will turn this to a temp file since these files can be large
        # https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#protected-and-temporary-files
        'results/{scenario}/{scenario}.sol'
    shell: 
        # solver command to solve a model and write results to a file 
        ''

rule process_results:
    message:"Processing results for [replace with wildcard]"
    params:
        # otoole configuration file
    input:
        'results/{scenario}/{scenario}.sol'
    output:
        expand('results/{{scenario}}/results/{csv}', csv=OUTPUT_FILES)
    shell: 
        # CLI command for otoole result processing 
        # https://otoole.readthedocs.io/en/latest/examples.html#process-solutions-from-different-solvers
        ''


"""
This rule may cahnge slightly depending on how you want to extract results 
"""
rule format_results:
    message:"Formating result data for [replace with wildcard]"
    input:
        expand('results/{{scenario}}/results/{csv}', csv=OUTPUT_FILES)
    output:
        expand('results/{{scenario}}/MinFin/{csv}', csv=OUTPUT_FILES)
    script:
         "scripts/format_results.py"

rule clean:
    shell:
        "rm -rf results/"

rule make_dag:
    shell:
        'snakemake --dag all | dot -Tpdf > dag.pdf'