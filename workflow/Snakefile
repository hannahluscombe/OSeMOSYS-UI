import pandas as pd

URLS = pd.read_csv("resources/SDK_Data.csv", index_col="Country_Scenario")
SCENARIOS = URLS.index.to_list() # list of scenario names from csv - extract using pandas 
OUTPUT_FILES = ["CapitalInvestment.csv", "AnnualVariableOperatingCost.csv", "AnnualFixedOperatingCost.csv"] # final files to be inputted into minfin (ie. CapaitalInvestment, AnnualFixedOperaingCost)
SOLVER = 'cplex'

def get_url(wildcards):
    return URLS.at[wildcards.scenario, "URL"]

rule all:
    input:
        expand("results/{scenario}/MinFin/{f}", scenario=SCENARIOS, f=OUTPUT_FILES)

rule download_xlsx:
    message:"Downloading xlsm {wildcards.scenario} from Zenodo"
    params:
        url = get_url
    output:
        xlsm = "results/{scenario}/{scenario}.xlsm"
    script: 
        "scripts/download_xlsm.py"

rule extract_data:
    message:"Extracted txt data for {wildcards.scenario}"
    input:
        xlsm = "results/{scenario}/{scenario}.xlsm"
    output:
        txt = "results/{scenario}/{scenario}.txt"
    script: 
        "scripts/extract_data.py"

rule simplify_data:
    message:"Simplifying data for {wildcards.scenario}"
    input:
        txt = "results/{scenario}/{scenario}.txt"
    output:
        txt = "results/{scenario}/{scenario}_simple.txt"
    script: 
        "scripts/simplify.py"

rule preprocess_data:
    message:"Pre-processing data for {wildcards.scenario}"
    params:
        data_format = "momani" # (momani|otoole)
    input:
        txt = "results/{scenario}/{scenario}_simple.txt"
    output:
        txt = "results/{scenario}/{scenario}_preprocessed.txt"
    script: 
        "scripts/preprocess.py"

rule build_model:
    message:"Building LP file for {wildcards.scenario}"
    params:
        model = "resources/osemosys.txt"
    input:
        data = "results/{scenario}/{scenario}_preprocessed.txt"
    output:
        lp = temp("results/{scenario}/{scenario}.lp")
    shell: 
        'glpsol -m {params.model} -d {input.data} --wlp {output.lp} --check'


rule solve_model:
    message:"Solving model for {wildcards.scenario}"
    params:
        solver = SOLVER
    input:
        lp = "results/{scenario}/{scenario}.lp"
    output:
        sol = temp("results/{scenario}/{scenario}.sol")
    shell: 
        '''
        if [ {params.solver} = gurobi ]
        then
          gurobi_cl Method=2 ResultFile={output.sol} {input.lp}
        elif [ {params.solver} = cplex ]
        then
          cplex -c "read {input.lp}" "optimize" "write {output.sol}"
        else
          cbc {input.lp} solve -sec 1500 -solu {output.sol}
        fi
        '''

rule process_results:
    message:"Processing results for {wildcards.scenario}"
    params:
        otoole_config = "resources/otoole.yaml",
        results_dir = "results/{scenario}/results", 
        solver = SOLVER
    input:
        sol = "results/{scenario}/{scenario}.sol",
        data = "results/{scenario}/{scenario}_preprocessed.txt"
    output:
        expand("results/{{scenario}}/results/{csv}", csv=OUTPUT_FILES)
    shell: 
        # CLI command for otoole result processing 
        # https://otoole.readthedocs.io/en/latest/examples.html#process-solutions-from-different-solvers
        "otoole results {params.solver} csv {input.sol} {params.results_dir} datafile {input.data} {params.otoole_config}"

"""
This rule may cahnge slightly depending on how you want to extract results 
"""
rule format_results:
    message:"Formating result data for {wildcards.scenario}"
    input:
        expand("results/{{scenario}}/results/{csv}", csv=OUTPUT_FILES)
    output:
        expand("results/{{scenario}}/MinFin/{csv}", csv=OUTPUT_FILES)
    script:
         "scripts/format_results.py"

rule clean:
    shell:
        "rm -rf results/"

rule make_dag:
    shell:
        "snakemake --dag all | dot -Tpdf > dag.pdf"